// Code generated by MockGen. DO NOT EDIT.
// Source: icircle_notification.go

// Package circles is a generated GoMock package.
package circles

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	users "github.com/tonouchi510/golang-ddd-layout/internal/domain/models/users"
)

// MockICircleNotification is a mock of ICircleNotification interface.
type MockICircleNotification struct {
	ctrl     *gomock.Controller
	recorder *MockICircleNotificationMockRecorder
}

// MockICircleNotificationMockRecorder is the mock recorder for MockICircleNotification.
type MockICircleNotificationMockRecorder struct {
	mock *MockICircleNotification
}

// NewMockICircleNotification creates a new mock instance.
func NewMockICircleNotification(ctrl *gomock.Controller) *MockICircleNotification {
	mock := &MockICircleNotification{ctrl: ctrl}
	mock.recorder = &MockICircleNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICircleNotification) EXPECT() *MockICircleNotificationMockRecorder {
	return m.recorder
}

// SetId mocks base method.
func (m *MockICircleNotification) SetId(id CircleId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetId", id)
}

// SetId indicates an expected call of SetId.
func (mr *MockICircleNotificationMockRecorder) SetId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetId", reflect.TypeOf((*MockICircleNotification)(nil).SetId), id)
}

// SetMembers mocks base method.
func (m *MockICircleNotification) SetMembers(members []users.UserId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMembers", members)
}

// SetMembers indicates an expected call of SetMembers.
func (mr *MockICircleNotificationMockRecorder) SetMembers(members interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMembers", reflect.TypeOf((*MockICircleNotification)(nil).SetMembers), members)
}

// SetName mocks base method.
func (m *MockICircleNotification) SetName(name CircleName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockICircleNotificationMockRecorder) SetName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockICircleNotification)(nil).SetName), name)
}

// SetOwnerId mocks base method.
func (m *MockICircleNotification) SetOwnerId(ownerId users.UserId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetOwnerId", ownerId)
}

// SetOwnerId indicates an expected call of SetOwnerId.
func (mr *MockICircleNotificationMockRecorder) SetOwnerId(ownerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetOwnerId", reflect.TypeOf((*MockICircleNotification)(nil).SetOwnerId), ownerId)
}
