// Code generated by MockGen. DO NOT EDIT.
// Source: icircle_repository.go

// Package circles is a generated GoMock package.
package circles

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICircleRepository is a mock of ICircleRepository interface.
type MockICircleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICircleRepositoryMockRecorder
}

// MockICircleRepositoryMockRecorder is the mock recorder for MockICircleRepository.
type MockICircleRepositoryMockRecorder struct {
	mock *MockICircleRepository
}

// NewMockICircleRepository creates a new mock instance.
func NewMockICircleRepository(ctrl *gomock.Controller) *MockICircleRepository {
	mock := &MockICircleRepository{ctrl: ctrl}
	mock.recorder = &MockICircleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICircleRepository) EXPECT() *MockICircleRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockICircleRepository) Find(id CircleId) (*Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockICircleRepositoryMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockICircleRepository)(nil).Find), id)
}

// FindByName mocks base method.
func (m *MockICircleRepository) FindByName(name CircleName) (*Circle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*Circle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockICircleRepositoryMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockICircleRepository)(nil).FindByName), name)
}

// Save mocks base method.
func (m *MockICircleRepository) Save(circle Circle, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", circle, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockICircleRepositoryMockRecorder) Save(circle, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockICircleRepository)(nil).Save), circle, tx)
}
