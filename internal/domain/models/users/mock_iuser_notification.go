// Code generated by MockGen. DO NOT EDIT.
// Source: iuser_notification.go

// Package users is a generated GoMock package.
package users

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserNotification is a mock of IUserNotification interface.
type MockIUserNotification struct {
	ctrl     *gomock.Controller
	recorder *MockIUserNotificationMockRecorder
}

// MockIUserNotificationMockRecorder is the mock recorder for MockIUserNotification.
type MockIUserNotificationMockRecorder struct {
	mock *MockIUserNotification
}

// NewMockIUserNotification creates a new mock instance.
func NewMockIUserNotification(ctrl *gomock.Controller) *MockIUserNotification {
	mock := &MockIUserNotification{ctrl: ctrl}
	mock.recorder = &MockIUserNotificationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserNotification) EXPECT() *MockIUserNotificationMockRecorder {
	return m.recorder
}

// SetId mocks base method.
func (m *MockIUserNotification) SetId(id UserId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetId", id)
}

// SetId indicates an expected call of SetId.
func (mr *MockIUserNotificationMockRecorder) SetId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetId", reflect.TypeOf((*MockIUserNotification)(nil).SetId), id)
}

// SetName mocks base method.
func (m *MockIUserNotification) SetName(name UserName) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetName", name)
}

// SetName indicates an expected call of SetName.
func (mr *MockIUserNotificationMockRecorder) SetName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetName", reflect.TypeOf((*MockIUserNotification)(nil).SetName), name)
}
