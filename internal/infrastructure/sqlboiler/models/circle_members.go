// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// CircleMember is an object representing the database table.
type CircleMember struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CircleID  string    `boil:"circle_id" json:"circle_id" toml:"circle_id" yaml:"circle_id"`
	MemberID  string    `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *circleMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L circleMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CircleMemberColumns = struct {
	ID        string
	CircleID  string
	MemberID  string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	CircleID:  "circle_id",
	MemberID:  "member_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}

var CircleMemberWhere = struct {
	ID        whereHelperint
	CircleID  whereHelperstring
	MemberID  whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`circle_members`.`id`"},
	CircleID:  whereHelperstring{field: "`circle_members`.`circle_id`"},
	MemberID:  whereHelperstring{field: "`circle_members`.`member_id`"},
	CreatedAt: whereHelpertime_Time{field: "`circle_members`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`circle_members`.`updated_at`"},
	DeletedAt: whereHelpernull_Time{field: "`circle_members`.`deleted_at`"},
}

// CircleMemberRels is where relationship names are stored.
var CircleMemberRels = struct {
	Circle string
	Member string
}{
	Circle: "Circle",
	Member: "Member",
}

// circleMemberR is where relationships are stored.
type circleMemberR struct {
	Circle *Circle
	Member *User
}

// NewStruct creates a new relationship struct
func (*circleMemberR) NewStruct() *circleMemberR {
	return &circleMemberR{}
}

// circleMemberL is where Load methods for each relationship are stored.
type circleMemberL struct{}

var (
	circleMemberAllColumns            = []string{"id", "circle_id", "member_id", "created_at", "updated_at", "deleted_at"}
	circleMemberColumnsWithoutDefault = []string{"circle_id", "member_id", "deleted_at"}
	circleMemberColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	circleMemberPrimaryKeyColumns     = []string{"id"}
)

type (
	// CircleMemberSlice is an alias for a slice of pointers to CircleMember.
	// This should generally be used opposed to []CircleMember.
	CircleMemberSlice []*CircleMember
	// CircleMemberHook is the signature for custom CircleMember hook methods
	CircleMemberHook func(context.Context, boil.ContextExecutor, *CircleMember) error

	circleMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	circleMemberType                 = reflect.TypeOf(&CircleMember{})
	circleMemberMapping              = queries.MakeStructMapping(circleMemberType)
	circleMemberPrimaryKeyMapping, _ = queries.BindMapping(circleMemberType, circleMemberMapping, circleMemberPrimaryKeyColumns)
	circleMemberInsertCacheMut       sync.RWMutex
	circleMemberInsertCache          = make(map[string]insertCache)
	circleMemberUpdateCacheMut       sync.RWMutex
	circleMemberUpdateCache          = make(map[string]updateCache)
	circleMemberUpsertCacheMut       sync.RWMutex
	circleMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var circleMemberBeforeInsertHooks []CircleMemberHook
var circleMemberBeforeUpdateHooks []CircleMemberHook
var circleMemberBeforeDeleteHooks []CircleMemberHook
var circleMemberBeforeUpsertHooks []CircleMemberHook

var circleMemberAfterInsertHooks []CircleMemberHook
var circleMemberAfterSelectHooks []CircleMemberHook
var circleMemberAfterUpdateHooks []CircleMemberHook
var circleMemberAfterDeleteHooks []CircleMemberHook
var circleMemberAfterUpsertHooks []CircleMemberHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CircleMember) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CircleMember) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CircleMember) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CircleMember) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CircleMember) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CircleMember) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CircleMember) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CircleMember) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CircleMember) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range circleMemberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCircleMemberHook registers your hook function for all future operations.
func AddCircleMemberHook(hookPoint boil.HookPoint, circleMemberHook CircleMemberHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		circleMemberBeforeInsertHooks = append(circleMemberBeforeInsertHooks, circleMemberHook)
	case boil.BeforeUpdateHook:
		circleMemberBeforeUpdateHooks = append(circleMemberBeforeUpdateHooks, circleMemberHook)
	case boil.BeforeDeleteHook:
		circleMemberBeforeDeleteHooks = append(circleMemberBeforeDeleteHooks, circleMemberHook)
	case boil.BeforeUpsertHook:
		circleMemberBeforeUpsertHooks = append(circleMemberBeforeUpsertHooks, circleMemberHook)
	case boil.AfterInsertHook:
		circleMemberAfterInsertHooks = append(circleMemberAfterInsertHooks, circleMemberHook)
	case boil.AfterSelectHook:
		circleMemberAfterSelectHooks = append(circleMemberAfterSelectHooks, circleMemberHook)
	case boil.AfterUpdateHook:
		circleMemberAfterUpdateHooks = append(circleMemberAfterUpdateHooks, circleMemberHook)
	case boil.AfterDeleteHook:
		circleMemberAfterDeleteHooks = append(circleMemberAfterDeleteHooks, circleMemberHook)
	case boil.AfterUpsertHook:
		circleMemberAfterUpsertHooks = append(circleMemberAfterUpsertHooks, circleMemberHook)
	}
}

// One returns a single circleMember record from the query.
func (q circleMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CircleMember, error) {
	o := &CircleMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for circle_members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CircleMember records from the query.
func (q circleMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (CircleMemberSlice, error) {
	var o []*CircleMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CircleMember slice")
	}

	if len(circleMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CircleMember records in the query.
func (q circleMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count circle_members rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q circleMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if circle_members exists")
	}

	return count > 0, nil
}

// Circle pointed to by the foreign key.
func (o *CircleMember) Circle(mods ...qm.QueryMod) circleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CircleID),
	}

	queryMods = append(queryMods, mods...)

	query := Circles(queryMods...)
	queries.SetFrom(query.Query, "`circle`")

	return query
}

// Member pointed to by the foreign key.
func (o *CircleMember) Member(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`user`")

	return query
}

// LoadCircle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (circleMemberL) LoadCircle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircleMember interface{}, mods queries.Applicator) error {
	var slice []*CircleMember
	var object *CircleMember

	if singular {
		object = maybeCircleMember.(*CircleMember)
	} else {
		slice = *maybeCircleMember.(*[]*CircleMember)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &circleMemberR{}
		}
		args = append(args, object.CircleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleMemberR{}
			}

			for _, a := range args {
				if a == obj.CircleID {
					continue Outer
				}
			}

			args = append(args, obj.CircleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`circle`), qm.WhereIn(`circle.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Circle")
	}

	var resultSlice []*Circle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Circle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for circle")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for circle")
	}

	if len(circleMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Circle = foreign
		if foreign.R == nil {
			foreign.R = &circleR{}
		}
		foreign.R.CircleMembers = append(foreign.R.CircleMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CircleID == foreign.ID {
				local.R.Circle = foreign
				if foreign.R == nil {
					foreign.R = &circleR{}
				}
				foreign.R.CircleMembers = append(foreign.R.CircleMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (circleMemberL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCircleMember interface{}, mods queries.Applicator) error {
	var slice []*CircleMember
	var object *CircleMember

	if singular {
		object = maybeCircleMember.(*CircleMember)
	} else {
		slice = *maybeCircleMember.(*[]*CircleMember)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &circleMemberR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &circleMemberR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`user`), qm.WhereIn(`user.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(circleMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MemberCircleMembers = append(foreign.R.MemberCircleMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.ID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MemberCircleMembers = append(foreign.R.MemberCircleMembers, local)
				break
			}
		}
	}

	return nil
}

// SetCircle of the circleMember to the related item.
// Sets o.R.Circle to related.
// Adds o to related.R.CircleMembers.
func (o *CircleMember) SetCircle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Circle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `circle_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"circle_id"}),
		strmangle.WhereClause("`", "`", 0, circleMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CircleID = related.ID
	if o.R == nil {
		o.R = &circleMemberR{
			Circle: related,
		}
	} else {
		o.R.Circle = related
	}

	if related.R == nil {
		related.R = &circleR{
			CircleMembers: CircleMemberSlice{o},
		}
	} else {
		related.R.CircleMembers = append(related.R.CircleMembers, o)
	}

	return nil
}

// SetMember of the circleMember to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.MemberCircleMembers.
func (o *CircleMember) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `circle_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"member_id"}),
		strmangle.WhereClause("`", "`", 0, circleMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.ID
	if o.R == nil {
		o.R = &circleMemberR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &userR{
			MemberCircleMembers: CircleMemberSlice{o},
		}
	} else {
		related.R.MemberCircleMembers = append(related.R.MemberCircleMembers, o)
	}

	return nil
}

// CircleMembers retrieves all the records using an executor.
func CircleMembers(mods ...qm.QueryMod) circleMemberQuery {
	mods = append(mods, qm.From("`circle_members`"))
	return circleMemberQuery{NewQuery(mods...)}
}

// FindCircleMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCircleMember(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CircleMember, error) {
	circleMemberObj := &CircleMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `circle_members` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, circleMemberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from circle_members")
	}

	return circleMemberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CircleMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no circle_members provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circleMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	circleMemberInsertCacheMut.RLock()
	cache, cached := circleMemberInsertCache[key]
	circleMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			circleMemberAllColumns,
			circleMemberColumnsWithDefault,
			circleMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `circle_members` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `circle_members` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `circle_members` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, circleMemberPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into circle_members")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == circleMemberMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for circle_members")
	}

CacheNoHooks:
	if !cached {
		circleMemberInsertCacheMut.Lock()
		circleMemberInsertCache[key] = cache
		circleMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CircleMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CircleMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	circleMemberUpdateCacheMut.RLock()
	cache, cached := circleMemberUpdateCache[key]
	circleMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			circleMemberAllColumns,
			circleMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update circle_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `circle_members` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, circleMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, append(wl, circleMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update circle_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for circle_members")
	}

	if !cached {
		circleMemberUpdateCacheMut.Lock()
		circleMemberUpdateCache[key] = cache
		circleMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q circleMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for circle_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for circle_members")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CircleMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circleMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `circle_members` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, circleMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in circleMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all circleMember")
	}
	return rowsAff, nil
}

var mySQLCircleMemberUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CircleMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no circle_members provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(circleMemberColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCircleMemberUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	circleMemberUpsertCacheMut.RLock()
	cache, cached := circleMemberUpsertCache[key]
	circleMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			circleMemberAllColumns,
			circleMemberColumnsWithDefault,
			circleMemberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			circleMemberAllColumns,
			circleMemberPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert circle_members, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "circle_members", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `circle_members` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(circleMemberType, circleMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for circle_members")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == circleMemberMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(circleMemberType, circleMemberMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for circle_members")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for circle_members")
	}

CacheNoHooks:
	if !cached {
		circleMemberUpsertCacheMut.Lock()
		circleMemberUpsertCache[key] = cache
		circleMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CircleMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CircleMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CircleMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), circleMemberPrimaryKeyMapping)
	sql := "DELETE FROM `circle_members` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from circle_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for circle_members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q circleMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no circleMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circle_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circle_members")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CircleMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(circleMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circleMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `circle_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, circleMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from circleMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for circle_members")
	}

	if len(circleMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CircleMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCircleMember(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CircleMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CircleMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), circleMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `circle_members`.* FROM `circle_members` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, circleMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CircleMemberSlice")
	}

	*o = slice

	return nil
}

// CircleMemberExists checks if the CircleMember row exists.
func CircleMemberExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `circle_members` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if circle_members exists")
	}

	return exists, nil
}
