// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCircles(t *testing.T) {
	t.Parallel()

	query := Circles()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCirclesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCirclesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Circles().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCirclesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CircleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCirclesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCirclesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Circles().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCirclesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CircleSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCirclesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CircleExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Circle exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CircleExists to return true, but got false.")
	}
}

func testCirclesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	circleFound, err := FindCircle(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if circleFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCirclesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Circles().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCirclesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Circles().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCirclesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	circleOne := &Circle{}
	circleTwo := &Circle{}
	if err = randomize.Struct(seed, circleOne, circleDBTypes, false, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}
	if err = randomize.Struct(seed, circleTwo, circleDBTypes, false, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = circleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = circleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Circles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCirclesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	circleOne := &Circle{}
	circleTwo := &Circle{}
	if err = randomize.Struct(seed, circleOne, circleDBTypes, false, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}
	if err = randomize.Struct(seed, circleTwo, circleDBTypes, false, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = circleOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = circleTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func circleBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func circleAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Circle) error {
	*o = Circle{}
	return nil
}

func testCirclesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Circle{}
	o := &Circle{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, circleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Circle object: %s", err)
	}

	AddCircleHook(boil.BeforeInsertHook, circleBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	circleBeforeInsertHooks = []CircleHook{}

	AddCircleHook(boil.AfterInsertHook, circleAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	circleAfterInsertHooks = []CircleHook{}

	AddCircleHook(boil.AfterSelectHook, circleAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	circleAfterSelectHooks = []CircleHook{}

	AddCircleHook(boil.BeforeUpdateHook, circleBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	circleBeforeUpdateHooks = []CircleHook{}

	AddCircleHook(boil.AfterUpdateHook, circleAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	circleAfterUpdateHooks = []CircleHook{}

	AddCircleHook(boil.BeforeDeleteHook, circleBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	circleBeforeDeleteHooks = []CircleHook{}

	AddCircleHook(boil.AfterDeleteHook, circleAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	circleAfterDeleteHooks = []CircleHook{}

	AddCircleHook(boil.BeforeUpsertHook, circleBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	circleBeforeUpsertHooks = []CircleHook{}

	AddCircleHook(boil.AfterUpsertHook, circleAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	circleAfterUpsertHooks = []CircleHook{}
}

func testCirclesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCirclesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(circleColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCircleToManyCircleMembers(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Circle
	var b, c CircleMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, circleMemberDBTypes, false, circleMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, circleMemberDBTypes, false, circleMemberColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.CircleID = a.ID
	c.CircleID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CircleMembers().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.CircleID == b.CircleID {
			bFound = true
		}
		if v.CircleID == c.CircleID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CircleSlice{&a}
	if err = a.L.LoadCircleMembers(ctx, tx, false, (*[]*Circle)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CircleMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CircleMembers = nil
	if err = a.L.LoadCircleMembers(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CircleMembers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCircleToManyAddOpCircleMembers(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Circle
	var b, c, d, e CircleMember

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, circleDBTypes, false, strmangle.SetComplement(circlePrimaryKeyColumns, circleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CircleMember{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, circleMemberDBTypes, false, strmangle.SetComplement(circleMemberPrimaryKeyColumns, circleMemberColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CircleMember{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCircleMembers(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.CircleID {
			t.Error("foreign key was wrong value", a.ID, first.CircleID)
		}
		if a.ID != second.CircleID {
			t.Error("foreign key was wrong value", a.ID, second.CircleID)
		}

		if first.R.Circle != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Circle != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CircleMembers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CircleMembers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CircleMembers().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testCircleToOneUserUsingOwner(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Circle
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, circleDBTypes, false, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OwnerID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Owner().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CircleSlice{&local}
	if err = local.L.LoadOwner(ctx, tx, false, (*[]*Circle)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Owner = nil
	if err = local.L.LoadOwner(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Owner == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCircleToOneSetOpUserUsingOwner(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Circle
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, circleDBTypes, false, strmangle.SetComplement(circlePrimaryKeyColumns, circleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetOwner(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Owner != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OwnerCircles[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OwnerID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OwnerID))
		reflect.Indirect(reflect.ValueOf(&a.OwnerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OwnerID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerID, x.ID)
		}
	}
}

func testCirclesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCirclesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CircleSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCirclesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Circles().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	circleDBTypes = map[string]string{`ID`: `char`, `Name`: `varchar`, `OwnerID`: `char`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`, `DeletedAt`: `datetime`}
	_             = bytes.MinRead
)

func testCirclesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(circlePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(circleAllColumns) == len(circlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, circleDBTypes, true, circlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCirclesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(circleAllColumns) == len(circlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Circle{}
	if err = randomize.Struct(seed, o, circleDBTypes, true, circleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, circleDBTypes, true, circlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(circleAllColumns, circlePrimaryKeyColumns) {
		fields = circleAllColumns
	} else {
		fields = strmangle.SetComplement(
			circleAllColumns,
			circlePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CircleSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCirclesUpsert(t *testing.T) {
	t.Parallel()

	if len(circleAllColumns) == len(circlePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLCircleUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Circle{}
	if err = randomize.Struct(seed, &o, circleDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Circle: %s", err)
	}

	count, err := Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, circleDBTypes, false, circlePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Circle struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Circle: %s", err)
	}

	count, err = Circles().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
